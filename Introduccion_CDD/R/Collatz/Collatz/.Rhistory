plot(LonSec,
main='Longitud de la secuencia de Collatz',
xlab='N', ylab='Longitud de la secuencia')
points(idxMax, maxLon, col='red')
sequences_lengths <- lapply(results_apply_arr, 'length')
LonSec <- unlist(sequences_lengths)
maxLon <- max(LonSec)
# Obtenemos el índice correspondiente con la función match para poder plotearlo
idxMax <- match(max(LonSec), LonSec)
plot(LonSec,
main='Longitud de la secuencia de Collatz',
xlab='N', ylab='Longitud de la secuencia')
points(idxMax, maxLon, col='red', '.')
sequences_lengths <- lapply(results_apply_arr, 'length')
LonSec <- unlist(sequences_lengths)
maxLon <- max(LonSec)
# Obtenemos el índice correspondiente con la función match para poder plotearlo
idxMax <- match(max(LonSec), LonSec)
plot(LonSec,
main='Longitud de la secuencia de Collatz',
xlab='N', ylab='Longitud de la secuencia')
points(idxMax, maxLon, col='red', bg='red')
sequences_lengths <- lapply(results_apply_arr, 'length')
LonSec <- unlist(sequences_lengths)
maxLon <- max(LonSec)
# Obtenemos el índice correspondiente con la función match para poder plotearlo
idxMax <- match(max(LonSec), LonSec)
plot(LonSec,
main='Longitud de la secuencia de Collatz',
xlab='N', ylab='Longitud de la secuencia')
points(idxMax, maxLon, col='red', pch='.')
sequences_lengths <- lapply(results_apply_arr, 'length')
LonSec <- unlist(sequences_lengths)
maxLon <- max(LonSec)
# Obtenemos el índice correspondiente con la función match para poder plotearlo
idxMax <- match(max(LonSec), LonSec)
plot(LonSec,
main='Longitud de la secuencia de Collatz',
xlab='N', ylab='Longitud de la secuencia')
points(idxMax, maxLon, col='red')
sequences_lengths <- lapply(results_apply_arr, 'length')
LonSec <- unlist(sequences_lengths)
maxLon <- max(LonSec)
# Obtenemos el índice correspondiente con la función match para poder plotearlo
idxMax <- match(max(LonSec), LonSec)
plot(LonSec,
main='Longitud de la secuencia de Collatz',
xlab='N', ylab='Longitud de la secuencia')
points(idxMax, maxLon, pch=21, col='red')
sequences_lengths <- lapply(results_apply_arr, 'length')
LonSec <- unlist(sequences_lengths)
maxLon <- max(LonSec)
# Obtenemos el índice correspondiente con la función match para poder plotearlo
idxMax <- match(max(LonSec), LonSec)
plot(LonSec,
main='Longitud de la secuencia de Collatz',
xlab='N', ylab='Longitud de la secuencia')
points(idxMax, maxLon, pch=21, col='red', bg='red')
knitr::opts_chunk$set(echo = TRUE)
N <- 5
# Introducimos el primer número de la secuencia en la lista de resultados
result <- c(N)
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
result <- c(result, N)
}
NSec <- length(result)
cat('La longitud de la secuencia generada es:',NSec,'\n')
print(result)
N <- 5
# Introducimos el primer número de la secuencia en la lista de resultados
result <- c(N)
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
print(N)
}
N <- 5
# Introducimos el primer número de la secuencia en la lista de resultados
result <- c(N)
while (N!=1){
print(N)
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
}
N <- 3
# Introducimos el primer número de la secuencia en la lista de resultados
result <- c(N)
while (N!=1){
print(N)
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
}
N <- 3
# Introducimos el primer número de la secuencia en la lista de resultados
result <- c(N)
while (N!=1){
print(N)
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
}
print(N)
N <- 3
# Introducimos el primer número de la secuencia en la lista de resultados
result <- c(N)
while (N!=1){
print(N)
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
}
# Printeamos el último número de la secuencia, aunque si hemos llegado hasta aquí ya sabemos que será un 1
print(N)
N <- 5
# Introducimos el primer número de la secuencia en la lista de resultados
result <- c(N)
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
result <- c(result, N)
}
NSec <- length(result)
cat('La longitud de la secuencia generada es:',NSec,'\n')
print(result)
N <- 5
# Creamosla secuencia vacía que servirá para almacenar los resultados
Secuencia <- integer(length=1000)
# Creamos un índice que nos servirá para llenar la secuencia
i <- 1
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
#NSec <- length(result)
Secuencia
N <- 3
# Creamosla secuencia vacía que servirá para almacenar los resultados
Secuencia <- integer(length=1000)
# Creamos un índice que nos servirá para llenar la secuencia
i <- 1
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
#NSec <- length(result)
Secuencia
N <- 3
# Creamosla secuencia vacía que servirá para almacenar los resultados
Secuencia <- integer(length=1000)
# Creamos un índice que nos servirá para llenar la secuencia
i <- 1
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
# Para seleccionar los valores correspondientes a la secuencia nos quedamos con
# los que son diferentes de 0
result <- Secuencia[Secuencia!=0]
result
N <- 3
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
# Para seleccionar los valores correspondientes a la secuencia nos quedamos con
# los que son diferentes de 0
result <- Secuencia[Secuencia!=0]
result
N <- 3
# Obligamos a que N sea entero
N <- as.integer(N)
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
# Para seleccionar los valores correspondientes a la secuencia nos quedamos con
# los que son diferentes de 0
result <- Secuencia[Secuencia!=0]
result
N <- 3
# Obligamos a que N sea entero
N <- as.integer(N)
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
N <- 1424652103065
# Obligamos a que N sea entero
N <- as.integer(N)
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
N <- 1424652103065
# Obligamos a que N sea entero
N <- as.integer(N)
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
N <- 1424652103065
# Obligamos a que N sea entero
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
# Para seleccionar los valores correspondientes a la secuencia nos quedamos con
# los que son diferentes de 0
result <- Secuencia[Secuencia!=0]
result
length(secuencia)
length(Secuencia)
Secuencia[length(Secuencia)]
test <- integer(1000)
test[10001]
test[1001 <- 9]
test[1001] <- 9
test
N <- 1424652103065
# Obligamos a que N sea entero
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
N <- 1424652103065
# Obligamos a que N sea entero
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
print(length(Secuencia))
result <- Secuencia[Secuencia!=0]
result
N <- 1424652103065
# Obligamos a que N sea entero
N <- as.integer(N)
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
N <- 3
# Obligamos a que N sea entero
N <- as.integer(N)
# Creamosla secuencia vacía que servirá para almacenar los resultados
# e introducimos N en la primera posición
Secuencia <- integer(length=1000)
Secuencia[1] <- N
# Creamos un índice que nos servirá para llenar la secuencia.
# Empezamos en 2 porque ya hemos llenado antes la primera posición.
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
result <- Secuencia[Secuencia!=0]
result
NSec <- length(result)
NSec
Collatz <- function(N){
Secuencia <- integer(length=1000)
Secuenci[1] <- N
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
result <- Secuencia[Secuencia!=0]
return(result)
}
Collatz(5)
Collatz <- function(N){
Secuencia <- integer(length=1000)
Secuencia[1] <- N
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
result <- Secuencia[Secuencia!=0]
return(result)
}
Collatz(5)
Collatz(3)
Collatz(5)
Collatz <- function(N){
N <- as.integer(N)
Secuencia <- integer(length=1000)
Secuencia[1] <- N
i <- 2
while (N!=1){
# Comprobamos si es par con la operacion módulo
if (N%%2==0){
N <- N/2
} else{
N <- N*3+1
}
# Añadimos el nuevo valor de N a la secuencia
Secuencia[i] <- N
i <- i+1
}
result <- Secuencia[Secuencia!=0]
return(result)
}
Collatz(5)
for (n in seq(1,20)){
print(Collatz(n))
}
results_apply <- apply(matrix(seq(1:1000)), MARGIN=1, FUN='Collatz')
typeof(results_apply)
names(results_apply) <- paste0('Sec', 1:length(results_apply))
results_apply[10]
